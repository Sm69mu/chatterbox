import 'dart:developer';

import '../constants/api_keys.dart';
import '../constants/gemini_system_insturction.dart';
import '../constants/hive_constants.dart';
import '../hive/chat_history.dart';
import '../hive/settings.dart';
import '../hive/user_model.dart';
import '../models/message_model.dart';
import 'package:flutter/material.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import 'package:hive_flutter/adapters.dart';
import 'package:image_picker/image_picker.dart';
import 'package:path_provider/path_provider.dart' as path;

class ChatProviders extends ChangeNotifier {
  // API key for Gemini
  static const String apikey = geminApiKey;
  // List of messages in the current chat
  static List<Message> inChatMessages = [];
  // List of images selected by user
  List<XFile>? imagesFileList = [];
  // Current chat ID
  String currentChatId = '';
  // Model used for text generation
  GenerativeModel? model;
  // Index of the currently selected message
  int currentIndex = 0;
  // Flag to indicate if loading is in progress
  bool isLoading = false;

//se incchatmessages
  Future<void> setInChatMessages({required String chatId}) async {
    // Load messages from database
    final messagesFromDB = await loadMessagesFromDB(chatId: chatId);
    // Iterate over loaded messages and add to the inChatMessages list if they don't exist
    for (var message in messagesFromDB) {
      if (inChatMessages.contains(message)) {
        log('message already exists');
        continue;
      }
      inChatMessages.add(message);
    }
    // Notify listeners of changes
    notifyListeners();
  }

  // Loads messages from the database for the specified chat ID
  Future<List<Message>> loadMessagesFromDB({required String chatId}) async {
    // Open Hive box for messages
    await Hive.openBox('${HiveConstants.chatMessagesBox}$chatId');
    final messageBox = Hive.box('${HiveConstants.chatMessagesBox}$chatId');
    // Extract messages from the box
    final newData = messageBox.keys.map((e) {
      final message = messageBox.get(e);
      final messageData = Message.fromMap(Map<String, dynamic>.from(message));
      return messageData;
    }).toList();
    // Notify listeners of changes
    notifyListeners();
    // Return the loaded messages
    return newData;
  }

  // Sets the list of image files
  void setImagesFileList({required List<XFile> listValue}) {
    imagesFileList = listValue;
    notifyListeners();
  }

  // Sets the loading flag
  void setLoading({required bool value}) {
    isLoading = value;
    notifyListeners();
  }

  // set current page index
  void setCurrentIndex({required int newIndex}) {
    currentIndex = newIndex;
    notifyListeners();
  }

  // set current chat id
  void setCurrentChatId({required String newChatId}) {
    currentChatId = newChatId;
    notifyListeners();
  }

//--------------------------------------------------------------------------------//
  // Generates code using the Gemini model
static Future<String> generateCode(
      dynamic input, String modelName, String systemInstruction) async {
    // Initialize Gemini model with configuration
    final model = GenerativeModel(
        model: modelName,
        apiKey: apikey, // Assuming 'apikey' is defined elsewhere
        generationConfig: GenerationConfig(
            temperature: 0.9, topP: 0.1, topK: 16, maxOutputTokens: 100),
        systemInstruction: Content.system(systemInstruction));

    // Generate content using the model and input text
    final response = await model.generateContent([input]);

    // Log the response for debugging
    log('Code Generation Response: ${response.toString()}');

    // Return the generated text
    if (response.text != null) {
      return response.text!;
    } else {
      throw Exception('No text generated by the model.');
    }
  }
//--------------------------------------------------------------------------------------------------------//

  // Initializes Hive database
  static initHive() async {
    // Get the application documents directory
    final dir = await path.getApplicationDocumentsDirectory();
    // Initialize Hive
    Hive.init(dir.path);
    // Initialize Hive for Flutter
    await Hive.initFlutter(HiveConstants.geminiDB);

    // Register adapters for chat history, user model, and settings
    if (!Hive.isAdapterRegistered(0)) {
      Hive.registerAdapter(ChatHistoryAdapter());
      await Hive.openBox<ChatHistory>(HiveConstants.chatHistoryBox);
    }
    if (!Hive.isAdapterRegistered(1)) {
      Hive.registerAdapter(UserModelAdapter());
      await Hive.openBox<UserModel>(HiveConstants.userBox);
    }
    if (!Hive.isAdapterRegistered(2)) {
      Hive.registerAdapter(SettingsAdapter());
      await Hive.openBox<Settings>(HiveConstants.settingsBox);
    }
  }
}
